(* linear "of course" operator (!A) *)
Definition ofc : Prop -> Prop
  := fun A:Prop => forall P:Prop, (A -> P) -@ P.
(* !A -@ A *)
Definition ofc_elim : forall A:Prop, ofc A -@ A
  := fun A:Prop => fun *oa:ofc A =>
      oa A (fun x:A => x).
(* !A -@ !!A *)
Definition ofc_introd : forall A:Prop, ofc A -@ ofc (ofc A)
  := fun A:Prop => fun *oa:ofc A =>
      oa (ofc (ofc A)) (fun a:A =>
        fun P:Prop => fun *ap:ofc A -> P =>
          ap (fun Q:Prop => fun *aq:A -> Q =>
            aq a
          )
      ).
(* linear "tensor" operator (A ** B) *)
Definition tensor : Prop -> Prop -> Prop
  := fun A:Prop => fun B:Prop =>
    forall P:Prop, (A -@ B -@ P) -@ P.
(* linear "with" operator (A && B) *)
Definition with : Prop -> Prop -> Prop
  := fun A:Prop => fun B:Prop =>
    forall P:Prop, (A -> B -> P) -@ P.
(* !(A && B) -@ !A ** !B *)
Definition ofc_with_tensor : forall A:Prop, forall B:Prop,
    ofc (with A B) -@ tensor (ofc A) (ofc B)
  := fun A:Prop => fun B:Prop => fun *oab:ofc (with A B) =>
    oab (tensor (ofc A) (ofc B)) (fun ab:with A B =>
      fun P:Prop => fun *abp:ofc A -@ ofc B -@ P =>
        abp (fun Q:Prop => fun *aq:A -> Q =>
          aq (
            ab A (fun a:A => fun b:B => a)
          )
        ) (fun Q:Prop => fun *bq:B -> Q =>
          bq (
            ab B (fun a:A => fun b:B => b)
          )
        )
    ).
(* !A ** !B -@ !(A && B) *)
Definition ofc_tensor_with : forall A:Prop, forall B:Prop,
    tensor (ofc A) (ofc B) -@ ofc (with A B)
  := fun A:Prop => fun B:Prop => fun *oaob:tensor (ofc A) (ofc B) =>
    oaob (ofc (with A B)) (fun *oa:ofc A => fun *ob:ofc B =>
      oa (ofc (with A B)) (fun a:A =>
        ob (ofc (with A B)) (fun b:B =>
          fun P:Prop => fun *abp:with A B -> P =>
          abp (fun Q:Prop => fun *abq:A -> B -> Q =>
            abq a b
          )
        )
      )
    ).
