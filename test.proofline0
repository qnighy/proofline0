(* logical bottom *)
Definition False : Prop := forall A:Prop, A.
(* logical and (A /\ B) *)
Definition and : Prop -> Prop -> Prop :=
  fun A:Prop => fun B:Prop =>
    forall P:Prop, (A -> B -> P) -> P.
(* logical or (A \/ B) *)
Definition or : Prop -> Prop -> Prop :=
  fun A:Prop => fun B:Prop =>
    forall P:Prop, (A -> P) -> (B -> P) -> P.
(* False -> A *)
Definition False_elim : forall A:Prop, False -> A
  := fun A:Prop => fun f:False => f A.
(* A -> B -> A /\ B *)
Definition and_intro :
    forall A:Prop, forall B:Prop, A -> B -> and A B
  := fun A:Prop => fun B:Prop => fun a:A => fun b:B =>
    fun P:Prop => fun f:(A -> B -> P) => f a b.
(* A -> A \/ B *)
Definition or_introl :
    forall A:Prop, forall B:Prop, A -> or A B
  := fun A:Prop => fun B:Prop => fun a:A =>
    fun P:Prop => fun f:(A -> P) => fun g:(B -> P) => f a.
(* B -> A \/ B *)
Definition or_intror :
    forall A:Prop, forall B:Prop, B -> or A B
  := fun A:Prop => fun B:Prop => fun b:B =>
    fun P:Prop => fun f:(A -> P) => fun g:(B -> P) => g b.
(* A /\ B -> A *)
Definition and_eliml :
    forall A:Prop, forall B:Prop, and A B -> A
  := fun A:Prop => fun B:Prop => fun ab:and A B =>
    ab A (fun a:A => fun b:B => a).
(* A /\ B -> B *)
Definition and_elimr :
    forall A:Prop, forall B:Prop, and A B -> B
  := fun A:Prop => fun B:Prop => fun ab:and A B =>
    ab B (fun a:A => fun b:B => b).
(* A \/ B -> (A -> P) -> (B -> P) -> P *)
Definition or_elim :
    forall A:Prop, forall B:Prop, or A B ->
      forall P:Prop, (A -> P) -> (B -> P) -> P
  := fun A:Prop => fun B:Prop => fun ab:or A B => ab.
(* A /\ B -> B /\ A *)
Definition and_comm :
    forall A:Prop, forall B:Prop, and A B -> and B A
  := fun A:Prop => fun B:Prop => fun ab:and A B =>
    and_intro B A (and_elimr A B ab) (and_eliml A B ab).
